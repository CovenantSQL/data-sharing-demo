'use strict';

var test = require('ava'),
    aes = require('aes-js'),
    e2e = require('../index');

function random_ascii_string(sz) {
    var ret = '';
    const cs = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const csz = cs.length;

    for (let i = 0; i != sz; ++i) {
        ret += cs.charAt(Math.floor(Math.random() * csz));
    }

    return ret;
}

function random_data(sz) {
    const ret = new Uint8Array(sz);

    for (let i = 0; i != sz; ++i) {
        ret[i] = Math.floor(Math.random() * 256);
    }

    return ret;
}

function to_hex(d) {
    return aes.utils.hex.fromBytes(d);
}

function from_hex(s) {
    return new Uint8Array(aes.utils.hex.toBytes(s));
}

test('should decrypt empty password data', function(t) {
    const h = '77c712e56588d23b06eb0bed2ccc9f26578a9b2b04053eb4e074856fc1949b37';
    const c = aes.utils.hex.toBytes(h);
    const d = e2e.decrypt_string(c, '');
    t.deepEqual(d, 'happy');
});

test('should decrypt cipher with password', function(t) {
    const hs = [
        '2869eb6ff895b789866b5f014e3765d7ef066ce3dedee2185d6f9e949fd5df55',
        'd5c5d4fb4763db4f002e1bcef6e1c90681a221193582f7931b626d15607cbe4c',
        'b5bb0672034b101dbd3b0d34f4a124e6a53f972833f518fd7bdbc1448567acc9',
    ];

    for (let i = 0; i != hs.length; ++i) {
        const c = from_hex(hs[i]);
        const d = e2e.decrypt_string(c, 'happy');
        t.deepEqual(d, 'happy');
    }
});

test('should decrypt encrypted data generated by myself', function(t) {
    const d = 'happy';
    const p = 'password';
    const c = e2e.encrypt(d, p);
    t.log('encrypted(in hex): ', to_hex(c));
    const dd = e2e.decrypt_string(c, p);
    t.deepEqual(dd, 'happy');
});

test('should decrypt randomly encrypted string', function(t) {
    for (let i = 0; i != 10; ++i) {
        const d = random_ascii_string(5 * i);
        const p = random_ascii_string(5 * i);
        const c = e2e.encrypt(d, p);
        t.log('text: ', d);
        t.log('password: ', p);
        t.log('encrypted(in hex): ', to_hex(c));
        const dd = e2e.decrypt_string(c, p);
        t.deepEqual(dd, d);
    }
});

test('should decrypt randomly encrypted binary data', function(t) {
    for (let i = 0; i != 10; ++i) {
        const d = random_data(5 * i);
        const p = random_data(5 * i);
        const c = e2e.encrypt(d, p);
        t.log('plain(in hex): ', to_hex(d));
        t.log('password(in hex): ', to_hex(p));
        t.log('encryped(in hex): ', to_hex(c));
        const dd = e2e.decrypt(c, p);
        t.deepEqual(dd, d);
    }
});

test('test with wrong password', function(t) {
    const d = 'happy';
    const p1 = 'password';
    const p2 = 'password2';
    const c = e2e.encrypt(d, p1);
    t.log('encrypted(in hex): ', to_hex(c));
    const error = t.throws(function(){
        e2e.decrypt_string(c, p2);
    }, Error);
    t.regex(error.message, /pkcs/);
});
